// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MisFinder.Data.Data.Context;

namespace MisFinder.Data.Migrations
{
    [DbContext(typeof(MisFinderDbContext))]
    [Migration("20190924115917_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.FoundAndLostItem", b =>
                {
                    b.Property<int>("FoundItemId");

                    b.Property<int>("LostItemId");

                    b.HasKey("FoundItemId", "LostItemId");

                    b.HasIndex("LostItemId");

                    b.ToTable("FoundAndLostItem");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.FoundItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Colour");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateFound");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("ExactLocation");

                    b.Property<byte[]>("Image");

                    b.Property<bool>("IsClaimed");

                    b.Property<int>("LocationId");

                    b.Property<string>("NameOfFoundItem");

                    b.Property<string>("SpecificLocation")
                        .HasMaxLength(100);

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StateId");

                    b.ToTable("FoundItems");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.ItemClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Description");

                    b.Property<int?>("FoundItemId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FoundItemId");

                    b.ToTable("ItemClaim");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.LocalGovernment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("LocalGovernments");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.LostItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Color");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateMisplaced");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsFound");

                    b.Property<string>("NameOfLostItem");

                    b.Property<string>("SpecificLocation")
                        .HasMaxLength(100);

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StateId");

                    b.ToTable("LostItems");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Abia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adamawa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Akwa Ibom"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Anambra"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bauchi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bayelsa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Benue"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Borno"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CrossRiver"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Delta"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ebonyi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Edo"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ekiti"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Enugu"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Gombe"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Imo"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Jigawa"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kaduna"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kano"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Katsina"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Kebbi"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Kogi"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Kwara"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Nassarawa"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Ogun"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Ondo"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Osun"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Oyo"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Plateau"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Rivers"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Sokoto"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Taraba"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Yobe"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Zamfara"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Abuja"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MisFinder.Domain.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MisFinder.Domain.Models.FoundAndLostItem", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.FoundItem", "FoundItem")
                        .WithMany()
                        .HasForeignKey("FoundItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MisFinder.Domain.Models.LostItem", "LostItem")
                        .WithMany("FoundLostItems")
                        .HasForeignKey("LostItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MisFinder.Domain.Models.FoundItem", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.ApplicationUser", "FoundItemUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MisFinder.Domain.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.ItemClaim", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MisFinder.Domain.Models.FoundItem")
                        .WithMany("ItemClaims")
                        .HasForeignKey("FoundItemId");
                });

            modelBuilder.Entity("MisFinder.Domain.Models.LocalGovernment", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.State")
                        .WithMany("LocalGovernments")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MisFinder.Domain.Models.LostItem", b =>
                {
                    b.HasOne("MisFinder.Domain.Models.ApplicationUser", "LostItemUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MisFinder.Domain.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
